name: CI

concurrency:
  group: ci-${{ github.head_ref }}
  cancel-in-progress: true

env:
  DEBUG: "napi:*"
  APP_NAME: "mdx-binding-core"
  MACOSX_DEPLOYMENT_TARGET: "10.13"
  # https://github.com/SchrodingerZhu/snmalloc-rs
  CACHE_FRIENDLY_OFFSET: 64

"on":
  push:
    branches:
      - main
    tags-ignore:
      - "**"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  pull_request: null

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: "x86_64-apple-darwin"
            build: |
              pnpm build
              strip -x *.node
          - host: windows-latest
            build: pnpm build
            target: "x86_64-pc-windows-msvc"
          # - host: windows-latest
          #   build: |
          #     export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=32;
          #     export CARGO_PROFILE_RELEASE_LTO=false
          #     pnpm build -- --target i686-pc-windows-msvc
          #     pnpm test
          #   target: "i686-pc-windows-msvc"
          #   setup: |
          #     choco install nodejs-lts --x86 -y --force
          #     echo "C:\\Program Files (x86)\\nodejs" >> $GITHUB_PATH
          - host: ubuntu-latest
            target: "x86_64-unknown-linux-gnu"
            docker: |
              docker pull $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-debian
              docker tag $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-debian builder
            build: |
              docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/build -w /build builder sh -c "npm install -g pnpm@6 && pnpm install && pnpm build && strip mdx-binding-core.linux-x64-gnu.node"
          - host: ubuntu-latest
            target: "x86_64-unknown-linux-musl"
            docker: |
              docker pull $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-alpine
              docker tag $DOCKER_REGISTRY_URL/napi-rs/napi-rs/nodejs-rust:lts-alpine builder
            build: docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/build -w /build builder sh -c "apk add --update cmake && npx pnpm@6 install && npx pnpm@6 build && strip mdx-binding-core.linux-x64-musl.node"
          - host: macos-latest
            target: "aarch64-apple-darwin"
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              pnpm build -- --target=aarch64-apple-darwin
              strip -x *.node
          - host: ubuntu-latest
            target: "aarch64-unknown-linux-gnu"
            setup: |
              sudo apt-get update
              sudo apt-get install g++-aarch64-linux-gnu gcc-aarch64-linux-gnu -y
            build: |
              pnpm build -- --target=aarch64-unknown-linux-gnu
              aarch64-linux-gnu-strip mdx-binding-core.linux-arm64-gnu.node
          - host: ubuntu-latest
            target: "armv7-unknown-linux-gnueabihf"
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y
            build: |
              pnpm build -- --target=armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip mdx-binding-core.linux-arm-gnueabihf.node
          - host: ubuntu-latest
            target: "aarch64-unknown-linux-musl"
            docker: |
              docker pull ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
              docker tag ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine builder
            build: docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd):/mdx-rs-binding -w /mdx-rs-binding builder sh -c "rustup target add aarch64-unknown-linux-musl && npx pnpm@6 install && npx pnpm@6 build -- --target=aarch64-unknown-linux-musl && /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip *.node"
          - host: windows-latest
            target: "aarch64-pc-windows-msvc"
            build: pnpm build -- --target aarch64-pc-windows-msvc

    name: stable - ${{ matrix.settings.target }} - node@14
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14
          check-latest: true

      - name: Install pnpm
        run: npm install -g pnpm@6

      - name: Install Rust Toolchain
        uses: ./.github/actions/rustup
        with:
          save-cache: ${{ github.ref_name == 'main' }}

      - name: Add Rust Target
        run: rustup target add ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.settings.target }}-node@14-cargo-cache

      - name: Cache NPM dependencies
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: npm-cache-${{ matrix.settings.target }}-node@14-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Pull latest image
        run: ${{ matrix.settings.docker }}
        env:
          DOCKER_REGISTRY_URL: ghcr.io
          DOCKER_USERNAME: ${{ github.actor }}
          DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ matrix.settings.docker }}

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      - name: "Install dependencies"
        run: pnpm install --no-frozen-lockfile

      - name: "Build"
        run: ${{ matrix.settings.build }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node

  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: "x86_64-apple-darwin"
          - host: windows-latest
            target: "x86_64-pc-windows-msvc"
        node: ["14", "16"]
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Install pnpm
        run: npm install -g pnpm@6

      - name: Cache NPM dependencies
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: npm-cache-test-${{ matrix.settings.target }}-${{ matrix.node }}-${{ hashFiles('pnpm-lock.yaml') }}

      - name: "Install dependencies"
        run: pnpm install --no-frozen-lockfile

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-${{ matrix.settings.target }}

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        run: pnpm test

  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ["14", "16"]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-x86_64-unknown-linux-gnu

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        run: docker run --rm -v $(pwd):/${{ env.APP_NAME }} -w /${{ env.APP_NAME }} node:${{ matrix.node }}-slim sh -c "npm install -g pnpm@6 && pnpm install && pnpm test"

  test-linux-x64-musl-binding:
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ["14", "16"]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-x86_64-unknown-linux-musl

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        run: docker run --rm -v $(pwd):/${{ env.APP_NAME }} -w /${{ env.APP_NAME }} node:${{ matrix.node }}-alpine sh -c "npm install -g pnpm@6 && pnpm install && pnpm test"

  test-linux-aarch64-gnu-binding:
    name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ["14", "16"]
    runs-on: ubuntu-latest

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-aarch64-unknown-linux-gnu

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/napi-rs/napi-rs/nodejs:aarch64-${{ matrix.node }}
          options: -v ${{ github.workspace }}:/build -w /build
          run: |
            set -e
            npm install -g pnpm@6
            pnpm install --no-frozen-lockfile
            pnpm test
            ls -la

  test-linux-aarch64-musl-binding:
    name: Test bindings on aarch64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ["14", "16"]
    runs-on: ubuntu-latest

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-aarch64-unknown-linux-musl

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Setup and run tests
        uses: docker://multiarch/alpine:aarch64-latest-stable
        with:
          args: >
            sh -c "
              apk add nodejs npm && \
              npm install -g pnpm@6 && \
              pnpm install --no-frozen-lockfile && \
              pnpm test
            "
  test-linux-arm-gnueabihf-binding:
    name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ["14", "16"]
    runs-on: ubuntu-latest

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: bindings-armv7-unknown-linux-gnueabihf

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/napi-rs/napi-rs/nodejs:armhf-${{ matrix.node }}
          options: -v ${{ github.workspace }}:/build -w /build
          run: |
            set -e
            npm install -g pnpm@6
            pnpm install --no-frozen-lockfile
            pnpm test
            ls -la

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
      - test-linux-aarch64-gnu-binding
      - test-linux-arm-gnueabihf-binding
      - test-macOS-windows-binding
      - test-linux-aarch64-musl-binding

    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"
          registry-url: "https://registry.npmjs.org"

      - name: Install pnpm
        run: npm install -g pnpm@6

      - name: Cache NPM dependencies
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: npm-cache-ubuntu-latest-${{ hashFiles('pnpm-lock.yaml') }}

      - name: "Install dependencies"
        run: pnpm install --no-frozen-lockfile

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Move artifacts
        run: pnpm artifacts

      - name: List packages
        run: ls -R ./npm
        shell: bash

      - name: Publish
        if: "startsWith(github.event.head_commit.message, 'chore(release): publish')"
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
